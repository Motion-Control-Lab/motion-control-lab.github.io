Jaco[0][0] = ((((S1 * C2 * S3 + S1 * S2 * C3) * C4 + C1 * S4) * C5 + (-S1 * C2 * C3 + S1 * S2 * S3) * S5) * C6 - ((S1 * C2 * S3 + S1 * S2 * C3) * S4 - C1 * C4) * S6) * L[x2 - 1] + (-((S1 * C2 * S3 + S1 * S2 * C3) * C4 + C1 * S4) * S5 + (-S1 * C2 * C3 + S1 * S2 * S3) * C5) * L[z2 - 1] - (((S1 * C2 * S3 + S1 * S2 * C3) * C4 + C1 * S4) * C5 + (-S1 * C2 * C3 + S1 * S2 * S3) * S5) * Lij * C6 + ((S1 * C2 * S3 + S1 * S2 * C3) * S4 - C1 * C4) * Lij * S6 + (-((S1 * C2 * S3 + S1 * S2 * C3) * C4 + C1 * S4) * S5 + (-S1 * C2 * C3 + S1 * S2 * S3) * C5) * Lj - ((S1 * C2 * S3 + S1 * S2 * C3) * C4 + C1 * S4) * Lh2 * S5 + (-S1 * C2 * C3 + S1 * S2 * S3) * Lh2 * C5 - (S1 * C2 * S3 + S1 * S2 * C3) * Lg * C4 - C1 * Lg * S4 + (-S1 * C2 * C3 + S1 * S2 * S3) * Lh1 - S1 * C2 * Le * C3 - C1 * Ld + S1 * S2 * Le * S3 - S1 * (Lb * C2 + Lac * S2);
Jaco[0][1] = ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * L[x2 - 1] + (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * L[z2 - 1] - (((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * Lij * C6 + ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * Lij * S6 + (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * Lj - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * Lh2 * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * Lh2 * C5 - (-C1 * C2 * S3 - C1 * S2 * C3) * Lg * C4 - S1 * Lg * S4 + (C1 * C2 * C3 - C1 * S2 * S3) * Lh1 + C1 * C2 * Le * C3 - S1 * Ld - C1 * S2 * Le * S3 + C1 * (Lb * C2 + Lac * S2);
Jaco[0][2] = 0;
Jaco[0][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[0][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[0][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
Jaco[1][0] = (((C1 * S2 * S3 - C1 * C2 * C3) * C4 * C5 + (-C1 * C2 * S3 - C1 * S2 * C3) * S5) * C6 - (C1 * S2 * S3 - C1 * C2 * C3) * S4 * S6) * L[x2 - 1] + (-(C1 * S2 * S3 - C1 * C2 * C3) * C4 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * C5) * L[z2 - 1] - ((C1 * S2 * S3 - C1 * C2 * C3) * C4 * C5 + (-C1 * C2 * S3 - C1 * S2 * C3) * S5) * Lij * C6 + (C1 * S2 * S3 - C1 * C2 * C3) * S4 * Lij * S6 + (-(C1 * S2 * S3 - C1 * C2 * C3) * C4 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * C5) * Lj - (C1 * S2 * S3 - C1 * C2 * C3) * C4 * Lh2 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * Lh2 * C5 - (C1 * S2 * S3 - C1 * C2 * C3) * Lg * C4 + (-C1 * C2 * S3 - C1 * S2 * C3) * Lh1 - C1 * S2 * Le * C3 - C1 * C2 * Le * S3 + C1 * (-Lb * S2 + Lac * C2);
Jaco[1][1] = (((-S1 * C2 * C3 + S1 * S2 * S3) * C4 * C5 + (-S1 * C2 * S3 - S1 * S2 * C3) * S5) * C6 - (-S1 * C2 * C3 + S1 * S2 * S3) * S4 * S6) * L[x2 - 1] + (-(-S1 * C2 * C3 + S1 * S2 * S3) * C4 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * C5) * L[z2 - 1] - ((-S1 * C2 * C3 + S1 * S2 * S3) * C4 * C5 + (-S1 * C2 * S3 - S1 * S2 * C3) * S5) * Lij * C6 + (-S1 * C2 * C3 + S1 * S2 * S3) * S4 * Lij * S6 + (-(-S1 * C2 * C3 + S1 * S2 * S3) * C4 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * C5) * Lj - (-S1 * C2 * C3 + S1 * S2 * S3) * C4 * Lh2 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * Lh2 * C5 - (-S1 * C2 * C3 + S1 * S2 * S3) * Lg * C4 + (-S1 * C2 * S3 - S1 * S2 * C3) * Lh1 - S1 * S2 * Le * C3 - S1 * C2 * Le * S3 + S1 * (-Lb * S2 + Lac * C2);
Jaco[1][2] = (((S2 * C3 + C2 * S3) * C4 * C5 + (S2 * S3 - C2 * C3) * S5) * C6 - (S2 * C3 + C2 * S3) * S4 * S6) * L[x2 - 1] + (-(S2 * C3 + C2 * S3) * C4 * S5 + (S2 * S3 - C2 * C3) * C5) * L[z2 - 1] - ((S2 * C3 + C2 * S3) * C4 * C5 + (S2 * S3 - C2 * C3) * S5) * Lij * C6 + (S2 * C3 + C2 * S3) * S4 * Lij * S6 + (-(S2 * C3 + C2 * S3) * C4 * S5 + (S2 * S3 - C2 * C3) * C5) * Lj - (S2 * C3 + C2 * S3) * C4 * Lh2 * S5 + (S2 * S3 - C2 * C3) * Lh2 * C5 - (S2 * C3 + C2 * S3) * Lg * C4 + (S2 * S3 - C2 * C3) * Lh1 - C2 * Le * C3 + S2 * Le * S3 - Lb * C2 - Lac * S2;
Jaco[1][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[1][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[1][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
Jaco[2][0] = (((C1 * S2 * S3 - C1 * C2 * C3) * C4 * C5 + (-C1 * C2 * S3 - C1 * S2 * C3) * S5) * C6 - (C1 * S2 * S3 - C1 * C2 * C3) * S4 * S6) * L[x2 - 1] + (-(C1 * S2 * S3 - C1 * C2 * C3) * C4 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * C5) * L[z2 - 1] - ((C1 * S2 * S3 - C1 * C2 * C3) * C4 * C5 + (-C1 * C2 * S3 - C1 * S2 * C3) * S5) * Lij * C6 + (C1 * S2 * S3 - C1 * C2 * C3) * S4 * Lij * S6 + (-(C1 * S2 * S3 - C1 * C2 * C3) * C4 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * C5) * Lj - (C1 * S2 * S3 - C1 * C2 * C3) * C4 * Lh2 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * Lh2 * C5 - (C1 * S2 * S3 - C1 * C2 * C3) * Lg * C4 + (-C1 * C2 * S3 - C1 * S2 * C3) * Lh1 - C1 * C2 * Le * S3 - C1 * S2 * Le * C3;
Jaco[2][1] = (((-S1 * C2 * C3 + S1 * S2 * S3) * C4 * C5 + (-S1 * C2 * S3 - S1 * S2 * C3) * S5) * C6 - (-S1 * C2 * C3 + S1 * S2 * S3) * S4 * S6) * L[x2 - 1] + (-(-S1 * C2 * C3 + S1 * S2 * S3) * C4 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * C5) * L[z2 - 1] - ((-S1 * C2 * C3 + S1 * S2 * S3) * C4 * C5 + (-S1 * C2 * S3 - S1 * S2 * C3) * S5) * Lij * C6 + (-S1 * C2 * C3 + S1 * S2 * S3) * S4 * Lij * S6 + (-(-S1 * C2 * C3 + S1 * S2 * S3) * C4 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * C5) * Lj - (-S1 * C2 * C3 + S1 * S2 * S3) * C4 * Lh2 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * Lh2 * C5 - (-S1 * C2 * C3 + S1 * S2 * S3) * Lg * C4 + (-S1 * C2 * S3 - S1 * S2 * C3) * Lh1 - S1 * C2 * Le * S3 - S1 * S2 * Le * C3;
Jaco[2][2] = (((S2 * C3 + C2 * S3) * C4 * C5 + (S2 * S3 - C2 * C3) * S5) * C6 - (S2 * C3 + C2 * S3) * S4 * S6) * L[x2 - 1] + (-(S2 * C3 + C2 * S3) * C4 * S5 + (S2 * S3 - C2 * C3) * C5) * L[z2 - 1] - ((S2 * C3 + C2 * S3) * C4 * C5 + (S2 * S3 - C2 * C3) * S5) * Lij * C6 + (S2 * C3 + C2 * S3) * S4 * Lij * S6 + (-(S2 * C3 + C2 * S3) * C4 * S5 + (S2 * S3 - C2 * C3) * C5) * Lj - (S2 * C3 + C2 * S3) * C4 * Lh2 * S5 + (S2 * S3 - C2 * C3) * Lh2 * C5 - (S2 * C3 + C2 * S3) * Lg * C4 + (S2 * S3 - C2 * C3) * Lh1 + S2 * Le * S3 - C2 * Le * C3;
Jaco[2][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[2][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[2][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
Jaco[3][0] = ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) * L[x2 - 1] - (-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * S5 * L[z2 - 1] - (-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * Lij * C6 + ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * Lij * S6 - (-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * S5 * Lj - (-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * Lh2 * S5 + (-C1 * C2 * S3 - C1 * S2 * C3) * Lg * S4 - S1 * Lg * C4;
Jaco[3][1] = ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6) * L[x2 - 1] - (-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * S5 * L[z2 - 1] - (-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * Lij * C6 + ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * Lij * S6 - (-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * S5 * Lj - (-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * Lh2 * S5 + (-S1 * C2 * S3 - S1 * S2 * C3) * Lg * S4 + C1 * Lg * C4;
Jaco[3][2] = (-(S2 * S3 - C2 * C3) * S4 * C5 * C6 - (S2 * S3 - C2 * C3) * C4 * S6) * L[x2 - 1] + (S2 * S3 - C2 * C3) * S4 * S5 * L[z2 - 1] + (S2 * S3 - C2 * C3) * S4 * C5 * Lij * C6 + (S2 * S3 - C2 * C3) * C4 * Lij * S6 + (S2 * S3 - C2 * C3) * S4 * S5 * Lj + (S2 * S3 - C2 * C3) * S4 * Lh2 * S5 + (S2 * S3 - C2 * C3) * Lg * S4;
Jaco[3][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[3][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[3][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
Jaco[4][0] = (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6 * L[x2 - 1] + (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 - (C1 * C2 * C3 - C1 * S2 * S3) * S5) * L[z2 - 1] - (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * Lij * C6 + (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 - (C1 * C2 * C3 - C1 * S2 * S3) * S5) * Lj - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * Lh2 * C5 - (C1 * C2 * C3 - C1 * S2 * S3) * Lh2 * S5;
Jaco[4][1] = (-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 * L[x2 - 1] + (-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 - (S1 * C2 * C3 - S1 * S2 * S3) * S5) * L[z2 - 1] - (-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * Lij * C6 + (-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 - (S1 * C2 * C3 - S1 * S2 * S3) * S5) * Lj - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * Lh2 * C5 - (S1 * C2 * C3 - S1 * S2 * S3) * Lh2 * S5;
Jaco[4][2] = (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) * C6 * L[x2 - 1] + (-(S2 * S3 - C2 * C3) * C4 * C5 - (-S2 * C3 - C2 * S3) * S5) * L[z2 - 1] - (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) * Lij * C6 + (-(S2 * S3 - C2 * C3) * C4 * C5 - (-S2 * C3 - C2 * S3) * S5) * Lj - (S2 * S3 - C2 * C3) * C4 * Lh2 * C5 - (-S2 * C3 - C2 * S3) * Lh2 * S5;
Jaco[4][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[4][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[4][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
Jaco[5][0] = (-(((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * S6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * C6) * L[x2 - 1] + (((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * Lij * S6 + ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * Lij * C6;
Jaco[5][1] = (-(((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * S6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * C6) * L[x2 - 1] + (((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * Lij * S6 + ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * Lij * C6;
Jaco[5][2] = (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 - (S2 * S3 - C2 * C3) * S4 * C6) * L[x2 - 1] + ((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * Lij * S6 + (S2 * S3 - C2 * C3) * S4 * Lij * C6;
Jaco[5][3] = (((S2 * S3 - C2 * C3) * S4 * C5 * C6 + (S2 * S3 - C2 * C3) * C4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.1e1 / 0.2e1) - (-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6) * pow(pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1), -0.3e1 / 0.2e1) * (0.2e1 * ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) * ((-(-C1 * C2 * S3 - C1 * S2 * C3) * S4 + S1 * C4) * C5 * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S6) + 0.2e1 * ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * ((-(-S1 * C2 * S3 - S1 * S2 * C3) * S4 - C1 * C4) * C5 * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S6)) / 0.2e1) / (0.1e1 + pow(-((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 + (S2 * S3 - C2 * C3) * S4 * S6, 0.2e1) / (pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, 0.2e1) + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1)));
Jaco[5][4] = ((-((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * S5 + (S1 * C2 * C3 - S1 * S2 * S3) * C5) * C6 / ((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6) - ((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1) * (-((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * S5 + (C1 * C2 * C3 - C1 * S2 * S3) * C5) * C6) / (0.1e1 + pow((((-S1 * C2 * S3 - S1 * S2 * C3) * C4 - C1 * S4) * C5 + (S1 * C2 * C3 - S1 * S2 * S3) * S5) * C6 - ((-S1 * C2 * S3 - S1 * S2 * C3) * S4 + C1 * C4) * S6, 0.2e1) * pow((((-C1 * C2 * S3 - C1 * S2 * C3) * C4 + S1 * S4) * C5 + (C1 * C2 * C3 - C1 * S2 * S3) * S5) * C6 - ((-C1 * C2 * S3 - C1 * S2 * C3) * S4 - S1 * C4) * S6, -0.2e1));
Jaco[5][5] = (((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * C6 - (S2 * S3 - C2 * C3) * S4 * S6) / (-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5) / (0.1e1 + pow(((S2 * S3 - C2 * C3) * C4 * C5 + (-S2 * C3 - C2 * S3) * S5) * S6 + (S2 * S3 - C2 * C3) * S4 * C6, 0.2e1) * pow(-(S2 * S3 - C2 * C3) * C4 * S5 + (-S2 * C3 - C2 * S3) * C5, -0.2e1));
